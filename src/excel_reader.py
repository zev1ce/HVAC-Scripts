"""
–ú–æ–¥—É–ª—å –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ç–∞–±–ª–∏—Ü —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –û–í–ò–ö
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import pandas as pd
import json
from typing import List, Dict, Optional, Tuple


class ExcelDataReader:
    """–ö–ª–∞—Å—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, config_path: str = "config/block_mapping.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Ç–∞—Ç–µ–ª—è Excel –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        """
        self.config = self._load_config(config_path)
        self.excel_columns = self.config.get("excel_columns", {})
    
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ —Ñ–∞–π–ª–µ {config_path}: {e}")
            return {}
    
    def check_file_availability(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        import os
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞  
        if not file_path.lower().endswith(('.xlsx', '.xls')):
            print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã .xlsx –∏–ª–∏ .xls")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not os.access(file_path, os.R_OK):
            print("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            file_size = os.path.getsize(file_path)
            if file_size == 0:
                print("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
                return False
            print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç")
        except OSError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞")
            return False
        
        return True
    
    def read_room_data(self, excel_path: str, sheet_name: str = None) -> List[Dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏–π –∏–∑ Excel —Ñ–∞–π–ª–∞
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä
        
        Args:
            excel_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏–π
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        normalized_path = self.normalize_file_path(excel_path)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        if not self.check_file_availability(normalized_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if excel_path != normalized_path:
                print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å:")
                print(f"üìÇ {normalized_path}")
            self.suggest_path_fixes(excel_path)
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã
        table_type = self.detect_table_type(normalized_path, sheet_name)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä
        if table_type == 'heat_loss':
            print("üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å")
            return self.read_heat_loss_table(normalized_path, sheet_name)
        else:
            print("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü")
            return self._read_standard_table(normalized_path, sheet_name)
    
    def _read_standard_table(self, excel_path: str, sheet_name: str = None) -> List[Dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        
        Args:
            excel_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏–π
        """
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            if sheet_name:
                df = pd.read_excel(excel_path, sheet_name=sheet_name)
            else:
                df = pd.read_excel(excel_path)
            
            print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ {excel_path}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            df = df.dropna(subset=[self.excel_columns.get("room_number", "–ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è")])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            room_data = []
            for _, row in df.iterrows():
                room_info = self._extract_room_info(row)
                if room_info:
                    room_data.append(room_info)
            
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(room_data)} –ø–æ–º–µ—â–µ–Ω–∏–π")
            return room_data
            
        except FileNotFoundError:
            print(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
            self.suggest_path_fixes(excel_path)
            return []
        except PermissionError:
            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {excel_path}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –ó–∞–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return []
        except UnicodeDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø—É—Ç–∏")
            print("   2. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –ø–∞–ø–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")
            print("   3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")
            return []
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Excel —Ñ–∞–π–ª–∞: {e}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .xlsx –∏–ª–∏ .xls")
            print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            return []
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            print(f"üìù –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print("üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å —ç—Ç–æ–π –æ—à–∏–±–∫–æ–π")
            return []
    
    def _extract_room_info(self, row: pd.Series) -> Optional[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–º–µ—â–µ–Ω–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ DataFrame
        
        Args:
            row: –°—Ç—Ä–æ–∫–∞ DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        try:
            room_info = {}
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ Excel —Å –ø–æ–ª—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
            for field, excel_col in self.excel_columns.items():
                if excel_col in row.index:
                    value = row[excel_col]
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    if pd.isna(value):
                        room_info[field] = ""
                    elif field in ["area", "air_supply", "air_extract", "heat_loss", "temperature", "coordinate_x", "coordinate_y"]:
                        # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                        room_info[field] = float(value) if value != "" else 0.0
                    else:
                        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
                        room_info[field] = str(value).strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not room_info.get("room_number"):
                return None
                
            return room_info
            
        except (ValueError, KeyError, TypeError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏—è: {e}")
            return None
    
    def get_column_mapping(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–æ–∫ Excel –∏ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        return self.excel_columns.copy()
    
    def has_coordinates_data(self, room_data_list: List[Dict]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        
        Args:
            room_data_list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, False –∏–Ω–∞—á–µ
        """
        if not room_data_list:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        for room_data in room_data_list[:5]:
            if (room_data.get("coordinate_x") is not None and 
                room_data.get("coordinate_y") is not None and
                room_data.get("coordinate_x") != 0 and 
                room_data.get("coordinate_y") != 0):
                return True
        
        return False
    
    def extract_coordinates(self, room_data_list: List[Dict]) -> List[Tuple[float, float]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
        
        Args:
            room_data_list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (x, y) —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        coordinates = []
        
        for room_data in room_data_list:
            x = room_data.get("coordinate_x", 0)
            y = room_data.get("coordinate_y", 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
            if x != 0 or y != 0:
                coordinates.append((float(x), float(y)))
            else:
                coordinates.append(None)  # –ü–æ–º–µ—á–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        return coordinates
    
    def update_excel_with_block_data(self, excel_file_path: str, room_data: List[Dict], 
                                   block_data: List[Dict], output_file_path: str = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç Excel —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–ª–æ–∫–æ–≤ AutoCAD
        
        Args:
            excel_file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
            room_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
            block_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤ AutoCAD
            output_file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏  
            reverse_fields = self.config.get("reverse_import_fields", ["supply_system", "extract_system"])
            
            print(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è–º–∏: {', '.join(reverse_fields)}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–º–µ—â–µ–Ω–∏—è
            block_dict = {}
            for block in block_data:
                room_num = block.get('room_number', '').strip()
                if room_num:
                    block_dict[room_num] = block
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏–π
            updated_count = 0
            for room_info in room_data:
                room_num = str(room_info.get('room_number', '')).strip()
                
                if room_num in block_dict:
                    block_info = block_dict[room_num]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                    for field in reverse_fields:
                        if field in block_info and block_info[field]:
                            old_value = room_info.get(field, '')
                            new_value = block_info[field]
                            
                            if old_value != new_value:
                                room_info[field] = new_value
                                print(f"  üìù –ü–æ–º–µ—â–µ–Ω–∏–µ {room_num}: {field} '{old_value}' ‚Üí '{new_value}'")
                    
                    updated_count += 1
                else:
                    print(f"  ‚ö†Ô∏è  –ü–æ–º–µ—â–µ–Ω–∏–µ {room_num}: –¥–∞–Ω–Ω—ã–µ –≤ –±–ª–æ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel
            output_path = output_file_path or excel_file_path
            self._save_updated_excel(room_data, output_path)
            
            print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–º–µ—â–µ–Ω–∏–π")
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel: {e}")
            return False
    
    def _save_updated_excel(self, room_data: List[Dict], file_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç Excel –∫–æ–ª–æ–Ω–æ–∫
        excel_columns = self.config.get("excel_columns", {})
        
        excel_data = []
        for room_info in room_data:
            excel_row = {}
            for field, excel_col in excel_columns.items():
                excel_row[excel_col] = room_info.get(field, '')
            excel_data.append(excel_row)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        df = pd.DataFrame(excel_data)
        df.to_excel(file_path, index=False, engine='openpyxl')
        
        print(f"üíæ Excel —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {len(excel_data)} –∑–∞–ø–∏—Å–µ–π")
    
    def validate_excel_structure(self, excel_path: str, sheet_name: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π
        
        Args:
            excel_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            if sheet_name:
                df = pd.read_excel(excel_path, sheet_name=sheet_name, nrows=1)
            else:
                df = pd.read_excel(excel_path, nrows=1)
            
            columns = df.columns.tolist()
            missing_columns = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = [
                self.excel_columns.get("room_number"),
                self.excel_columns.get("room_name")
            ]
            
            for col in required_columns:
                if col and col not in columns:
                    missing_columns.append(col)
            
            if missing_columns:
                print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {columns}")
                return False
            
            return True
            
        except (FileNotFoundError, PermissionError, ValueError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel: {e}")
            return False
    
    def read_from_multiple_sources(self, data_sources: List[Dict]) -> List[Dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Excel –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            data_sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                [
                    {
                        "file_path": "path/to/file.xlsx",
                        "sheet_name": "–õ–∏—Å—Ç1", 
                        "name": "heat_loss",
                        "fields": ["room_number", "room_name", "heat_loss", "temperature"],
                        "priority": 1
                    },
                    ...
                ]
                
        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
        """
        print("\nüìä –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        all_room_data = {}  # –°–ª–æ–≤–∞—Ä—å –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–º–µ—â–µ–Ω–∏—è
        source_stats = {}   # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        
        for source in data_sources:
            source_name = source.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
            file_path = source.get("file_path")
            sheet_name = source.get("sheet_name")
            allowed_fields = source.get("fields", [])
            priority = source.get("priority", 0)
            
            print(f"\nüìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_name}': {file_path}")
            
            if not file_path:
                print(f"  ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_name}'")
                continue
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_data = self.read_room_data(file_path, sheet_name)
            
            if not source_data:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ '{source_name}'")
                source_stats[source_name] = {"rooms": 0, "fields_added": 0}
                continue
            
            rooms_processed = 0
            fields_added = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            for room_record in source_data:
                room_num = str(room_record.get("room_number", "")).strip()
                
                if not room_num:
                    continue
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if room_num not in all_room_data:
                    all_room_data[room_num] = {
                        "room_number": room_num,
                        "_sources": {},  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª–µ–π
                        "_priority": {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–ª–µ–π
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                for field, value in room_record.items():
                    if field == "room_number":
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    if allowed_fields and field not in allowed_fields:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    should_update = (
                        field not in all_room_data[room_num] or 
                        all_room_data[room_num].get(f"_{field}_priority", -1) <= priority
                    )
                    
                    if should_update and value not in ["", 0, 0.0, None]:
                        all_room_data[room_num][field] = value
                        all_room_data[room_num]["_sources"][field] = source_name
                        all_room_data[room_num]["_priority"][field] = priority
                        fields_added += 1
                
                rooms_processed += 1
            
            source_stats[source_name] = {
                "rooms": rooms_processed, 
                "fields_added": fields_added
            }
            
            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–π: {rooms_processed}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {fields_added}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∏ –æ—á–∏—â–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        merged_data = []
        for room_num, room_data in all_room_data.items():
            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
            clean_room = {k: v for k, v in room_data.items() if not k.startswith("_")}
            merged_data.append(clean_room)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  üè† –í—Å–µ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏–π: {len(merged_data)}")
        
        for source_name, stats in source_stats.items():
            print(f"  üìÇ {source_name}: {stats['rooms']} –ø–æ–º–µ—â–µ–Ω–∏–π, {stats['fields_added']} –ø–æ–ª–µ–π")
        
        return merged_data
    
    def validate_multiple_sources(self, data_sources: List[Dict]) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data_sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        """
        validation_results = {}
        
        print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        
        for source in data_sources:
            source_name = source.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
            file_path = source.get("file_path")
            sheet_name = source.get("sheet_name")
            
            print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_name}': {file_path}")
            
            if not file_path:
                print("  ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
                validation_results[source_name] = False
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∏ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            is_valid = self.validate_excel_structure(file_path, sheet_name)
            validation_results[source_name] = is_valid
            
            if is_valid:
                print(f"  ‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            else:
                print(f"  ‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        return validation_results
    
    def create_data_sources_from_user_input(self) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        """
        print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ Excel —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data/:")
        
        data_sources = []
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏
        print("\nüî• –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –†–∞—Å—á–µ—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å")
        heat_loss_file = self.select_file_from_data_folder("—Ñ–∞–π–ª —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å")
        if heat_loss_file:
            heat_loss_sheet = input("–ò–º—è –ª–∏—Å—Ç–∞ (Enter –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ): ").strip() or None
            
            data_sources.append({
                "file_path": heat_loss_file,
                "sheet_name": heat_loss_sheet,
                "name": "heat_loss",
                "fields": ["room_number", "room_name", "heat_loss", "temperature"],
                "priority": 1
            })
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –í–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω—ã  
        print("\nüí® –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –†–∞—Å—á–µ—Ç –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–æ–≤")
        air_exchange_file = self.select_file_from_data_folder("—Ñ–∞–π–ª —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–æ–≤")
        if air_exchange_file:
            air_exchange_sheet = input("–ò–º—è –ª–∏—Å—Ç–∞ (Enter –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ): ").strip() or None
            
            data_sources.append({
                "file_path": air_exchange_file,
                "sheet_name": air_exchange_sheet,
                "name": "air_exchange", 
                "fields": ["room_number", "room_name", "area", "air_supply", "air_extract", 
                          "supply_system", "extract_system", "cleanliness_class", "temperature"],
                "priority": 2  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–æ–≤
            })
        
        if not data_sources:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return []
        
        print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(data_sources)}")
        for source in data_sources:
            import os
            file_name = os.path.basename(source['file_path'])
            print(f"  üìÇ {source['name']}: {file_name}")
            
        return data_sources
    
    @staticmethod
    def normalize_file_path(file_path: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        
        Args:
            file_path: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        import os
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized_path = file_path.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if normalized_path.startswith('"') and normalized_path.endswith('"'):
            normalized_path = normalized_path[1:-1]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–µ—à–∏, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
        normalized_path = os.path.normpath(normalized_path)
        
        # –î–ª—è Windows –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä—è–º—ã–º–∏ —Å–ª–µ—à–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if os.name == 'nt':  # Windows
            normalized_path = normalized_path.replace('\\', '/')
        
        return normalized_path
    
    @staticmethod
    def get_excel_files_from_data_folder() -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Excel —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ data/
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ Excel —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ data/
        """
        import os
        import glob
        
        data_folder = "data"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {data_folder}/")
            return []
        
        # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã
        excel_patterns = [
            os.path.join(data_folder, "*.xlsx"),
            os.path.join(data_folder, "*.xls")
        ]
        
        excel_files = []
        for pattern in excel_patterns:
            excel_files.extend(glob.glob(pattern))
        
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Excel (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å ~$)
        excel_files = [f for f in excel_files if not os.path.basename(f).startswith('~$')]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        def get_modification_time(file_path):
            return os.path.getmtime(file_path)
        
        excel_files.sort(key=get_modification_time, reverse=True)
        
        return excel_files
    
    @staticmethod
    def select_file_from_data_folder(file_type: str = "Excel —Ñ–∞–π–ª") -> str:
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ data/
        
        Args:
            file_type: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
        """
        import os
        import datetime
        
        excel_files = ExcelDataReader.get_excel_files_from_data_folder()
        
        if not excel_files:
            print("‚ùå –í –ø–∞–ø–∫–µ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤")
            print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/")
            return None
        
        print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data/: {len(excel_files)}")
        print(f"üìã –í—ã–±–µ—Ä–∏—Ç–µ {file_type}:")
        
        for i, file_path in enumerate(excel_files, 1):
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            mod_time = os.path.getmtime(file_path)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file_size < 1024:
                size_str = f"{file_size} –±"
            elif file_size < 1024 * 1024:
                size_str = f"{file_size / 1024:.1f} –ö–ë"
            else:
                size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            mod_time_str = datetime.datetime.fromtimestamp(mod_time).strftime("%d.%m.%Y %H:%M")
            
            print(f"  {i}. {file_name}")
            print(f"     üìä {size_str}, –∏–∑–º–µ–Ω–µ–Ω: {mod_time_str}")
        
        print(f"  {len(excel_files) + 1}. –û—Ç–º–µ–Ω–∞")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(excel_files) + 1}): ").strip()
                
                if not choice:
                    continue
                
                choice_num = int(choice)
                
                if choice_num == len(excel_files) + 1:
                    print("‚ùå –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω")
                    return None
                
                if 1 <= choice_num <= len(excel_files):
                    selected_file = excel_files[choice_num - 1]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(selected_file)}")
                    return selected_file
                else:
                    print(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(excel_files) + 1}")
                    
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
    
    def read_heat_loss_table(self, excel_path: str, sheet_name: str = None) -> List[Dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–∞—á–∞–ª–æ —Å 20 —Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã A (–Ω–æ–º–µ—Ä), B (–Ω–∞–∑–≤–∞–Ω–∏–µ), S (—Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏)
        
        Args:
            excel_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        normalized_path = self.normalize_file_path(excel_path)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        if not self.check_file_availability(normalized_path):
            return []
        
        try:
            print(f"üìä –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å –∏–∑ {normalized_path}")
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª, –Ω–∞—á–∏–Ω–∞—è —Å 20 —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 19)
            if sheet_name:
                df = pd.read_excel(normalized_path, sheet_name=sheet_name, header=None, skiprows=19)
            else:
                df = pd.read_excel(normalized_path, header=None, skiprows=19)
            
            print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å")
            
            room_data = []
            processed_count = 0
            
            for index, row in df.iterrows():
                try:
                    # –°—Ç–æ–ª–±–µ—Ü A (–∏–Ω–¥–µ–∫—Å 0) - –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è
                    room_number = row.iloc[0] if len(row) > 0 and not pd.isna(row.iloc[0]) else None
                    
                    # –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1) - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è  
                    room_name = row.iloc[1] if len(row) > 1 and not pd.isna(row.iloc[1]) else None
                    
                    # –°—Ç–æ–ª–±–µ—Ü S (–∏–Ω–¥–µ–∫—Å 18) - —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏
                    heat_loss = row.iloc[18] if len(row) > 18 and not pd.isna(row.iloc[18]) else None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if room_number is None or room_name is None:
                        continue
                    
                    # –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è
                    room_number_str = str(room_number).strip()
                    if not room_number_str or room_number_str in ['nan', 'None', '']:
                        continue
                    
                    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
                    room_name_str = str(room_name).strip()
                    if not room_name_str or room_name_str in ['nan', 'None', '']:
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏
                    heat_loss_value = 0.0
                    if heat_loss is not None and not pd.isna(heat_loss):
                        try:
                            heat_loss_value = float(heat_loss)
                        except (ValueError, TypeError):
                            heat_loss_value = 0.0
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    room_info = {
                        "room_number": room_number_str,
                        "room_name": room_name_str,
                        "heat_loss": heat_loss_value,
                        "temperature": 20.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    }
                    
                    room_data.append(room_info)
                    processed_count += 1
                    
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index + 20}: {e}")
                    continue
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ–º–µ—â–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if room_data:
                print("üìã –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                for i, room in enumerate(room_data[:3]):
                    print(f"  {i+1}. {room['room_number']}: {room['room_name']} - {room['heat_loss']} –í—Ç")
            
            return room_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å: {e}")
            return []
    
    def detect_table_type(self, excel_path: str, sheet_name: str = None) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å)
        
        Args:
            excel_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
            
        Returns:
            'standard' - –æ–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            'heat_loss' - —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å —Å–æ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        try:
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞
            if sheet_name:
                df_sample = pd.read_excel(excel_path, sheet_name=sheet_name, nrows=25, header=None)
            else:
                df_sample = pd.read_excel(excel_path, nrows=25, header=None)
            
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å
            for index, row in df_sample.iterrows():
                if len(row) > 0:
                    cell_text = str(row.iloc[0]).lower()
                    if '—Ä–∞—Å—á–µ—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å' in cell_text or '—Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å' in cell_text:
                        print("üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å")
                        return 'heat_loss'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    if any(header in cell_text for header in ['–Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ø–ª–æ—â–∞–¥—å']):
                        print("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
                        return 'standard'
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            if len(df_sample) > 0:
                first_row = df_sample.iloc[0]
                if len(first_row) > 2:
                    # –ï—Å–ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = [str(cell).lower() for cell in first_row[:5] if not pd.isna(cell)]
                    if any('–Ω–æ–º–µ—Ä' in h or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in h or '–ø–ª–æ—â–∞–¥—å' in h for h in headers):
                        return 'standard'
            
            print("üìã –¢–∏–ø —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
            return 'standard'
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return 'standard'
    
    @staticmethod
    def suggest_path_fixes(file_path: str):
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        
        Args:
            file_path: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        print("\nüîß –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—É—Ç–∏:")
        print(f"üìÇ –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å: {file_path}")
        print(f"üìÇ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {ExcelDataReader.normalize_file_path(file_path)}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if '\\' in file_path:
            alt1 = file_path.replace('\\', '/')
            print(f"üìÇ –í–∞—Ä–∏–∞–Ω—Ç 1 (–ø—Ä—è–º—ã–µ —Å–ª–µ—à–∏): {alt1}")
            
            alt2 = file_path.replace('\\', '\\\\')
            print(f"üìÇ –í–∞—Ä–∏–∞–Ω—Ç 2 (–¥–≤–æ–π–Ω—ã–µ —Å–ª–µ—à–∏): {alt2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        has_cyrillic = any(ord(char) > 127 for char in file_path)
        if has_cyrillic:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø—É—Ç–∏")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")
            print("   2. –ò–ª–∏ –≤ –ø–∞–ø–∫—É data/ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        if ' ' in file_path:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ –ø—É—Ç–∏")
            print("üí° –≠—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–æ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏:")
            print("   1. –ó–∞–∫–ª—é—á–∏—Ç–µ –ø—É—Ç—å –≤ –∫–∞–≤—ã—á–∫–∏")
            print("   2. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –ø–∞–ø–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    reader = ExcelDataReader()
    
    # –ü—Ä–∏–º–µ—Ä —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data = reader.read_room_data("data/sample_hvac_data.xlsx")
    
    for room in data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–º–µ—â–µ–Ω–∏—è
        print(f"–ü–æ–º–µ—â–µ–Ω–∏–µ {room.get('room_number')}: {room.get('room_name')}")
        print(f"  –ü–ª–æ—â–∞–¥—å: {room.get('area')} –º¬≤")
        print(f"  –ü—Ä–∏—Ç–æ–∫: {room.get('air_supply')} –º¬≥/—á")
        print(f"  –í—ã—Ç—è–∂–∫–∞: {room.get('air_extract')} –º¬≥/—á")
        print()
