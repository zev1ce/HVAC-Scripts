"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AutoCAD —á–µ—Ä–µ–∑ COM –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""
import win32com.client
import json
from typing import List, Dict, Optional, Tuple


class AutoCADController:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AutoCAD —á–µ—Ä–µ–∑ COM"""
    
    def __init__(self, config_path: str = "config/block_mapping.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ AutoCAD
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.acad_app = None
        self.acad_doc = None
        self.config = self._load_config(config_path)
        self.block_attributes = self.config.get("block_attributes", {})
        self.target_blocks = self.config.get("target_blocks", [])
        
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ —Ñ–∞–π–ª–µ {config_path}")
            return {}
    
    def connect_to_autocad(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É AutoCAD
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É AutoCAD
            self.acad_app = win32com.client.GetActiveObject("AutoCAD.Application")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents = []
            for i in range(self.acad_app.Documents.Count):
                doc = self.acad_app.Documents.Item(i)
                documents.append((doc, doc.Name))
            
            if not documents:
                print("‚ùå –í AutoCAD –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return False
            
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–∞–µ–º –≤—ã–±–æ—Ä
            if len(documents) > 1:
                print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
                for i, (doc, name) in enumerate(documents):
                    active_mark = " (–∞–∫—Ç–∏–≤–Ω—ã–π)" if doc == self.acad_app.ActiveDocument else ""
                    print(f"  {i+1}. {name}{active_mark}")
                
                while True:
                    try:
                        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (1-{len(documents)}) –∏–ª–∏ Enter –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ: ").strip()
                        
                        if not choice:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                            self.acad_doc = self.acad_app.ActiveDocument
                            break
                        
                        doc_index = int(choice) - 1
                        if 0 <= doc_index < len(documents):
                            self.acad_doc = documents[doc_index][0]
                            # –î–µ–ª–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
                            self.acad_app.ActiveDocument = self.acad_doc
                            break
                        else:
                            print(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(documents)}")
                            
                    except ValueError:
                        print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            else:
                # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
                self.acad_doc = documents[0][0]
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AutoCAD —É—Å–ø–µ—à–Ω–æ")
            print(f"üìÑ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {self.acad_doc.Name}")
            return True
            
        except ImportError:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å win32com. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pywin32")
            return False
        except RuntimeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AutoCAD –∑–∞–ø—É—â–µ–Ω –∏ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD: {e}")
            return False
    
    def find_room_blocks(self) -> List[Tuple]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –±–ª–æ–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏–π –≤ —á–µ—Ä—Ç–µ–∂–µ
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–±–ª–æ–∫, –Ω–æ–º–µ—Ä_–ø–æ–º–µ—â–µ–Ω–∏—è)
        """
        if not self.acad_doc:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD")
            return []
        
        room_blocks = []
        
        try:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏
            for entity in self.acad_doc.ModelSpace:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤—Å—Ç–∞–≤–∫–æ–π –±–ª–æ–∫–∞
                if entity.ObjectName == "AcDbBlockReference":
                    block_name = entity.EffectiveName
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–ª–æ–∫–æ–º –ø–æ–º–µ—â–µ–Ω–∏—è
                    if any(target in block_name.upper() for target in self.target_blocks):
                        room_number = self._get_room_number_from_block(entity)
                        if room_number:
                            room_blocks.append(entity)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ entity, –±–µ–∑ –∫–æ—Ä—Ç–µ–∂–∞
                            print(f"–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ø–æ–º–µ—â–µ–Ω–∏—è {room_number}: {block_name}")
            
            print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π: {len(room_blocks)}")
            return room_blocks
            
        except AttributeError as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç–∞–º AutoCAD: {e}")
            return []
        except RuntimeError as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–∫–æ–≤: {e}")
            return []
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–∫–æ–≤: {e}")
            return []
    
    def _get_room_number_from_block(self, block_ref) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –±–ª–æ–∫–∞
        
        Args:
            block_ref: –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–∫ AutoCAD
            
        Returns:
            –ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–ª–æ–∫–∞
            attributes = block_ref.GetAttributes()
            
            for room_attr in attributes:
                tag = room_attr.TagString.upper()
                
                # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ–º–µ—â–µ–Ω–∏—è
                room_num_tag = self.block_attributes.get("room_number", "ROOM_NUM").upper()
                if tag == room_num_tag:
                    return room_attr.TextString.strip()
            
            return None
            
        except (AttributeError, IndexError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–º–µ—â–µ–Ω–∏—è: {e}")
            return None
    
    def update_block_attributes(self, block_ref, room_data: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è
        
        Args:
            block_ref: –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–∫ AutoCAD
            room_data: –î–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ Excel
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            attributes = block_ref.GetAttributes()
            updated_count = 0
            
            for block_attr in attributes:
                tag = block_attr.TagString.upper()
                
                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
                for data_field, attr_tag in self.block_attributes.items():
                    if tag == attr_tag.upper() and data_field in room_data:
                        value = room_data[data_field]
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è
                        if data_field == "room_name":
                            new_value = self._abbreviate_room_name(str(value))
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                        if data_field in ["area", "air_supply", "air_extract", "heat_loss", "temperature"]:
                            try:
                                num_value = float(value)
                                if data_field == "area":
                                    new_value = f"{num_value:.1f} –º¬≤"
                                elif data_field in ["air_supply", "air_extract"]:
                                    new_value = f"{num_value:.0f} –º¬≥/—á"
                                elif data_field == "heat_loss":
                                    new_value = f"{num_value:.0f} –í—Ç"
                                elif data_field == "temperature":
                                    new_value = f"{num_value:.1f}¬∞C"
                                else:
                                    new_value = f"{num_value:.0f}"
                            except (ValueError, TypeError):
                                new_value = "0"
                        else:
                            new_value = str(value)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç
                        if block_attr.TextString != new_value:
                            block_attr.TextString = new_value
                            updated_count += 1
                            print(f"  –û–±–Ω–æ–≤–ª–µ–Ω {tag}: {new_value}")
            
            if updated_count > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ –≤ —á–µ—Ä—Ç–µ–∂–µ
                block_ref.Update()
                return True
            else:
                print("  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞")
                return False
                
        except (AttributeError, ValueError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –±–ª–æ–∫–∞: {e}")
            return False
    
    def update_all_room_blocks(self, room_data_list: List[Dict]) -> Dict[str, int]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel
        
        Args:
            room_data_list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        if not self.acad_doc:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD")
            return {"updated": 0, "not_found": 0, "errors": 0}
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–º–µ—â–µ–Ω–∏—è
        room_data_dict = {
            str(room["room_number"]): room 
            for room in room_data_list 
            if room.get("room_number")
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏–π
        room_blocks = self.find_room_blocks()
        
        stats = {"updated": 0, "not_found": 0, "errors": 0}
        
        for block_ref, room_number in room_blocks:
            try:
                if room_number in room_data_dict:
                    room_data = room_data_dict[room_number]
                    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è {room_number}: {room_data.get('room_name', '')}")
                    
                    if self.update_block_attributes(block_ref, room_data):
                        stats["updated"] += 1
                    else:
                        print("  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫")
                        stats["errors"] += 1
                else:
                    print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è {room_number} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Excel")
                    stats["not_found"] += 1
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ {room_number}: {e}")
                stats["errors"] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        try:
            self.acad_doc.Save()
            print("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except (AttributeError, PermissionError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        
        return stats
    
    def read_block_attributes(self, room_blocks: List) -> List[Dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π
        
        Args:
            room_blocks: –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –±–ª–æ–∫–æ–≤
        """
        if not self.acad_doc:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD")
            return []
        
        block_data = []
        
        print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–∑ {len(room_blocks)} –±–ª–æ–∫–æ–≤...")
        
        for i, block_ref in enumerate(room_blocks):
            try:
                room_info = {}
                
                # –ß–∏—Ç–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–ª–æ–∫–∞
                if hasattr(block_ref, 'HasAttributes') and block_ref.HasAttributes:
                    block_attrs = block_ref.GetAttributes()
                    
                    for block_attr in block_attrs:
                        attr_tag = block_attr.TagString.upper()
                        attr_value = block_attr.TextString.strip()
                        
                        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–ª–æ–∫–∞ —Å –ø–æ–ª—è–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        for field, block_tag in self.config.get("block_attributes", {}).items():
                            if attr_tag == block_tag.upper():
                                room_info[field] = attr_value
                                break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è
                if room_info.get('room_number'):
                    room_info['block_index'] = i
                    block_data.append(room_info)
                    print(f"  üìã –ë–ª–æ–∫ {room_info.get('room_number')}: –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(room_info)-1} –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
                else:
                    print(f"  ‚ö†Ô∏è  –ë–ª–æ–∫ #{i+1}: –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–ª–æ–∫–∞ #{i+1}: {e}")
                continue
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(block_data)} –±–ª–æ–∫–æ–≤")
        return block_data
    
    def create_blocks_from_template(self, room_data_list: List[Dict], template_block_name: str, 
                                   start_point: Tuple[float, float] = None, 
                                   spacing: Tuple[float, float] = None) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏–π –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Excel
        
        Args:
            room_data_list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
            template_block_name: –ò–º—è –±–ª–æ–∫–∞-—à–∞–±–ª–æ–Ω–∞
            start_point: –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (x, y). –ï—Å–ª–∏ None - –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            spacing: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (dx, dy). –ï—Å–ª–∏ None - –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã
        grid_settings = self.config.get("placement_settings", {}).get("grid", {})
        
        if start_point is None:
            start_point = (
                grid_settings.get("default_start_x", 0),
                grid_settings.get("default_start_y", 0)
            )
            
        if spacing is None:
            spacing = (
                grid_settings.get("default_spacing_x", 100),
                grid_settings.get("default_spacing_y", 50)
            )
            
        blocks_per_row = grid_settings.get("blocks_per_row", 10)
        if not self.acad_doc:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD")
            return {"created": 0, "errors": 0}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–ª–æ–∫–∞
        if not self.block_exists(template_block_name):
            print(f"‚ùå –ë–ª–æ–∫-—à–∞–±–ª–æ–Ω '{template_block_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä—Ç–µ–∂–µ")
            return {"created": 0, "errors": 0}
        
        stats = {"created": 0, "errors": 0}
        
        print(f"\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{template_block_name}'...")
        print(f"   üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {start_point}")
        print(f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏: {spacing}")
        print(f"   üìã –ë–ª–æ–∫–æ–≤ –≤ —Ä—è–¥—É: {blocks_per_row}")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –±–ª–æ–∫–∏ –ø–æ —Å–µ—Ç–∫–µ
        for i, room_data in enumerate(room_data_list):
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                row = i // blocks_per_row  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                col = i % blocks_per_row
                
                x = start_point[0] + col * spacing[0]
                y = start_point[1] - row * spacing[1]  # –í–Ω–∏–∑ –ø–æ Y
                
                print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ {room_data.get('room_number', 'N/A')} –≤ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                if not hasattr(self.acad_doc, 'ModelSpace'):
                    raise AttributeError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –º–æ–¥–µ–ª–∏")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤—Å—Ç–∞–≤–∫–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤–∞–∂–Ω–æ: double —Ç–∏–ø –¥–ª—è COM)
                insert_point = [float(x), float(y), 0.0]
                
                # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –≤—Å—Ç–∞–≤–∫–∏ –±–ª–æ–∫–∞
                block_ref = None
                
                # –ú–µ—Ç–æ–¥ 1: InsertBlock —Å VARIANT (–Ω–∞–¥–µ–∂–Ω—ã–π)
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º
                    # VT_ARRAY = 8192, VT_R8 = 5 (double array)
                    variant_point = win32com.client.VARIANT(
                        8192 | 5,  # VT_ARRAY | VT_R8
                        insert_point
                    )
                    
                    block_ref = self.acad_doc.ModelSpace.InsertBlock(
                        variant_point,
                        str(template_block_name),
                        1.0, 1.0, 1.0, 0.0
                    )
                        
                except Exception:
                    # –ú–µ—Ç–æ–¥ 2: –û–±—ã—á–Ω—ã–π InsertBlock (fallback)
                    try:
                        block_ref = self.acad_doc.ModelSpace.InsertBlock(
                            insert_point,
                            str(template_block_name),
                            1.0, 1.0, 1.0, 0.0
                        )
                            
                    except Exception as e2:
                        print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫")
                        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫ {template_block_name}") from e2
                
                if block_ref is None:
                    raise RuntimeError("–ë–ª–æ–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
                if self._fill_block_attributes(block_ref, room_data):
                    stats["created"] += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è {room_data.get('room_number', 'N/A')}")
                else:
                    stats["errors"] += 1
                    print(f"  ‚ö†Ô∏è  –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è {room_data.get('room_number', 'N/A')}")
                
            except Exception as e:
                stats["errors"] += 1
                error_msg = str(e)
                if "2147352567" in error_msg:
                    print(f"  ‚ùå COM –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è {room_data.get('room_number', 'N/A')}: –í–æ–∑–º–æ–∂–Ω–æ, –±–ª–æ–∫ '{template_block_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    print(f"     –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —á–µ—Ä—Ç–µ–∂–µ")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è {room_data.get('room_number', 'N/A')}: {error_msg}")
        
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {stats['created']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        
        return stats
    
    def create_blocks_from_coordinates(self, room_data_list: List[Dict], template_block_name: str,
                                     coordinates_list: List[Tuple[float, float]]) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏–π –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        
        Args:
            room_data_list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
            template_block_name: –ò–º—è –±–ª–æ–∫–∞-—à–∞–±–ª–æ–Ω–∞
            coordinates_list: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (x, y) –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤
        """
        if not self.acad_doc:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AutoCAD")
            return {"created": 0, "errors": 0}
        
        if len(coordinates_list) < len(room_data_list):
            print(f"‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç ({len(coordinates_list)}) –º–µ–Ω—å—à–µ —á–µ–º –ø–æ–º–µ—â–µ–Ω–∏–π ({len(room_data_list)})")
            print("   –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –±–ª–æ–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–ª–æ–∫–∞
        if not self.block_exists(template_block_name):
            print(f"‚ùå –ë–ª–æ–∫-—à–∞–±–ª–æ–Ω '{template_block_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä—Ç–µ–∂–µ")
            return {"created": 0, "errors": 0}
        
        stats = {"created": 0, "errors": 0}
        
        print("\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        for i, room_data in enumerate(room_data_list[:len(coordinates_list)]):
            try:
                x, y = coordinates_list[i]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤—Å—Ç–∞–≤–∫–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤–∞–∂–Ω–æ: double —Ç–∏–ø –¥–ª—è COM)
                insert_point = [float(x), float(y), 0.0]
                
                # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –≤—Å—Ç–∞–≤–∫–∏ –±–ª–æ–∫–∞
                block_ref = None
                
                # –ú–µ—Ç–æ–¥ 1: InsertBlock —Å VARIANT (–Ω–∞–¥–µ–∂–Ω—ã–π)
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º
                    # VT_ARRAY = 8192, VT_R8 = 5 (double array)
                    variant_point = win32com.client.VARIANT(
                        8192 | 5,  # VT_ARRAY | VT_R8
                        insert_point
                    )
                    
                    block_ref = self.acad_doc.ModelSpace.InsertBlock(
                        variant_point,
                        str(template_block_name),
                        1.0, 1.0, 1.0, 0.0
                    )
                        
                except Exception:
                    # –ú–µ—Ç–æ–¥ 2: –û–±—ã—á–Ω—ã–π InsertBlock (fallback)
                    block_ref = self.acad_doc.ModelSpace.InsertBlock(
                        insert_point,
                        str(template_block_name),
                        1.0, 1.0, 1.0, 0.0
                    )
                
                if block_ref is None:
                    raise RuntimeError("–ë–ª–æ–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                if self._fill_block_attributes(block_ref, room_data):
                    stats["created"] += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è {room_data.get('room_number')} –≤ ({x}, {y})")
                else:
                    stats["errors"] += 1
                    
            except (AttributeError, ValueError, IndexError) as e:
                stats["errors"] += 1
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ –¥–ª—è {room_data.get('room_number')}: {e}")
        
        return stats
    
    def block_exists(self, block_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –≤ —á–µ—Ä—Ç–µ–∂–µ"""
        try:
            doc_blocks = self.acad_doc.Blocks
            for i in range(doc_blocks.Count):
                current_block = doc_blocks.Item(i)
                current_name = current_block.Name
                
                if current_name.upper() == block_name.upper():
                    return True
            return False
        except (AttributeError, IndexError):
            return False
    
    def _abbreviate_room_name(self, room_name: str) -> str:
        """
        –°–æ–∫—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏—è
        
        Args:
            room_name: –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏
        """
        if not room_name:
            return ""
            
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        abbreviations = {
            "–ü–æ–º–µ—â–µ–Ω–∏–µ": "–ü–æ–º.",
            "–ø–æ–º–µ—â–µ–Ω–∏–µ": "–ø–æ–º.",
            "–ö–∞–±–∏–Ω–µ—Ç": "–ö–∞–±.",
            "–∫–∞–±–∏–Ω–µ—Ç": "–∫–∞–±.",
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è": "–õ–∞–±.",
            "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è": "–ª–∞–±.",
            "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ": "–ü—Ä–æ–∏–∑–≤.",
            "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ": "–ø—Ä–æ–∏–∑–≤.",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ": "–¢–µ—Ö.",
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ": "—Ç–µ—Ö."
        }
        
        result = str(room_name)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        for full_word, abbreviated in abbreviations.items():
            result = result.replace(full_word, abbreviated)
        
        return result

    def _fill_block_attributes(self, block_ref, room_data: Dict) -> bool:
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–º–µ—â–µ–Ω–∏—è
        
        Args:
            block_ref: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫
            room_data: –î–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É –±–ª–æ–∫–∞
            if not hasattr(block_ref, 'GetAttributes'):
                return False
                
            attributes = block_ref.GetAttributes()
            
            for fill_attr in attributes:
                tag = fill_attr.TagString.upper()
                
                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
                for data_field, attr_tag in self.block_attributes.items():
                    if tag == attr_tag.upper() and data_field in room_data:
                        value = room_data[data_field]
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è
                        if data_field == "room_name":
                            new_value = self._abbreviate_room_name(str(value))
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                        if data_field in ["area", "air_supply", "air_extract", "heat_loss", "temperature"]:
                            try:
                                num_value = float(value)
                                if data_field == "area":
                                    new_value = f"{num_value:.1f} –º¬≤"
                                elif data_field in ["air_supply", "air_extract"]:
                                    new_value = f"{num_value:.0f} –º¬≥/—á"
                                elif data_field == "heat_loss":
                                    new_value = f"{num_value:.0f} –í—Ç"
                                elif data_field == "temperature":
                                    new_value = f"{num_value:.1f}¬∞C"
                                else:
                                    new_value = f"{num_value:.0f}"
                            except (ValueError, TypeError):
                                new_value = "0"
                        else:
                            new_value = str(value)
                        
                        fill_attr.TextString = new_value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫
            block_ref.Update()
            return True
            
        except (AttributeError, ValueError) as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {e}")
            return False
    
    def get_available_blocks(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –≤ —á–µ—Ä—Ç–µ–∂–µ
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –±–ª–æ–∫–æ–≤
        """
        if not self.acad_doc:
            return []
        
        block_names = []
        try:
            doc_blocks = self.acad_doc.Blocks
            for i in range(doc_blocks.Count):
                doc_block = doc_blocks.Item(i)
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±–ª–æ–∫–∏
                if not doc_block.Name.startswith('*'):
                    block_names.append(doc_block.Name)
            
            return sorted(block_names)
            
        except AttributeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤: {e}")
            return []
    
    def get_block_info(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –±–ª–æ–∫–∞—Ö –≤ —á–µ—Ä—Ç–µ–∂–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–∞—Ö
        """
        if not self.acad_doc:
            return []
        
        blocks_info = []
        
        try:
            for entity in self.acad_doc.ModelSpace:
                if entity.ObjectName == "AcDbBlockReference":
                    block_info = {
                        "name": entity.EffectiveName,
                        "attributes": []
                    }
                    
                    try:
                        attributes = entity.GetAttributes()
                        for block_attr in attributes:
                            block_info["attributes"].append({
                                "tag": block_attr.TagString,
                                "value": block_attr.TextString
                            })
                    except AttributeError:
                        # –ë–ª–æ–∫ –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        pass
                    
                    blocks_info.append(block_info)
            
            return blocks_info
            
        except AttributeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∞—Ö: {e}")
            return []


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    controller = AutoCADController()
    
    if controller.connect_to_autocad():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö
        blocks = controller.get_block_info()
        print(f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –≤ —á–µ—Ä—Ç–µ–∂–µ: {len(blocks)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤
        for block in blocks[:5]:
            print(f"–ë–ª–æ–∫: {block['name']}")
            for attr in block['attributes']:
                print(f"  {attr['tag']}: {attr['value']}")