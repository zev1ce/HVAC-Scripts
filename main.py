"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –û–í–ò–ö –≤ AutoCAD
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = Path(__file__).parent
src_dir = current_dir / "src"
sys.path.insert(0, str(src_dir))

try:
    from excel_reader import ExcelDataReader
    from autocad_controller import AutoCADController
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã excel_reader.py –∏ autocad_controller.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ src/")
    sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("=" * 60)
    print("–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ù–û–°–ê –î–ê–ù–ù–´–• –û–í–ò–ö –í AUTOCAD")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    config_path = "config/block_mapping.json"
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    excel_reader = ExcelDataReader(config_path)
    autocad_controller = AutoCADController(config_path)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AutoCAD
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AutoCAD...")
    if not autocad_controller.connect_to_autocad():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AutoCAD!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AutoCAD –∑–∞–ø—É—â–µ–Ω –∏ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö –≤ —á–µ—Ä—Ç–µ–∂–µ
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ –≤ —á–µ—Ä—Ç–µ–∂–µ...")
    blocks_info = autocad_controller.get_block_info()
    available_blocks = autocad_controller.get_available_blocks()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –±–ª–æ–∫–∞-—à–∞–±–ª–æ–Ω–∞
    default_block = autocad_controller.config.get("default_template_block", "HVAC_ROOM_DATA")
    has_template = autocad_controller.block_exists(default_block)
    print(f"üì¶ –ë–ª–æ–∫-—à–∞–±–ª–æ–Ω '{default_block}': {'‚úÖ –Ω–∞–π–¥–µ–Ω' if has_template else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –°—á–∏—Ç–∞–µ–º –±–ª–æ–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏–π
    room_blocks_count = 0
    if blocks_info:
        for block in blocks_info:
            if any(target in block['name'].upper() 
                  for target in autocad_controller.target_blocks):
                room_blocks_count += 1
    
    print(f"üè† –ë–ª–æ–∫–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π –≤ —á–µ—Ä—Ç–µ–∂–µ: {room_blocks_count}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    print("\nüìÇ –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    print("  1. –û–¥–∏–Ω Excel —Ñ–∞–π–ª (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)")
    print("  2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ + –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω—ã)")
    print("  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
    
    while True:
        data_mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (1-3): ").strip()
        if data_mode in ['1', '2', '3']:
            break
        print("–í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
    
    room_data = None
    excel_path = None
    
    if data_mode == '1':
        # –†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ data
        print("\nüìÑ –†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞...")
        
        excel_path = excel_reader.select_file_from_data_folder("Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –û–í–ò–ö")
        
        if not excel_path:
            print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
        if not excel_reader.validate_excel_structure(excel_path):
            print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!")
            return
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
        print("üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...")
        room_data = excel_reader.read_room_data(excel_path)
        
    elif data_mode == '2':
        # –†–µ–∂–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print("\nüìä –†–µ–∂–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        data_sources = excel_reader.create_data_sources_from_user_input()
        
        if not data_sources:
            print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        validation_results = excel_reader.validate_multiple_sources(data_sources)
        
        valid_sources = [name for name, is_valid in validation_results.items() if is_valid]
        
        if not valid_sources:
            print("‚ùå –ù–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
            return
        
        if len(valid_sources) < len(data_sources):
            print(f"‚ö†Ô∏è  –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(valid_sources)}")
        
        # –ß–∏—Ç–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        room_data = excel_reader.read_from_multiple_sources(data_sources)
        excel_path = "multiple_sources"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏
        
    else:  # data_mode == '3'
        # –†–µ–∂–∏–º –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        example_file = "data/sample_hvac_data.xlsx"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(example_file):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞: {example_file}")
            excel_path = example_file
        else:
            print("üìÇ –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É data/...")
            excel_files = excel_reader.get_excel_files_from_data_folder()
            
            if excel_files:
                print("üí° –í –ø–∞–ø–∫–µ data/ –Ω–∞–π–¥–µ–Ω—ã Excel —Ñ–∞–π–ª—ã. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö?")
                use_existing = input("–î–∞/–Ω–µ—Ç (Enter = —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä): ").strip().lower()
                
                if use_existing in ['–¥–∞', 'yes', 'y', '–¥']:
                    excel_path = excel_reader.select_file_from_data_folder("Excel —Ñ–∞–π–ª")
                    if not excel_path:
                        print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                        return
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
                    print("   –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞...")
                    create_sample_excel(example_file)
                    excel_path = example_file
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
                print("   –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞...")
                create_sample_excel(example_file)
                excel_path = example_file
        
        if not os.path.exists(excel_path):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        room_data = excel_reader.read_room_data(excel_path)
    
    if not room_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return
    
    print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ {len(room_data)} –ø–æ–º–µ—â–µ–Ω–∏—è—Ö")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    print("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
    for i, room in enumerate(room_data[:3]):
        print(f"  {i+1}. –ü–æ–º–µ—â–µ–Ω–∏–µ {room.get('room_number')}: {room.get('room_name')}")
        print(f"     –ü–ª–æ—â–∞–¥—å: {room.get('area')} –º¬≤, –ü—Ä–∏—Ç–æ–∫: {room.get('air_supply')} –º¬≥/—á")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    existing_room_blocks = autocad_controller.find_room_blocks()
    
    if existing_room_blocks:
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–π: {len(existing_room_blocks)}")
        print("üìã –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
        print("  1. –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏")
        print("  2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞")
        print("  3. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤ –≤ Excel")
        print("  4. –û—Ç–º–µ–Ω–∞")
        
        while True:
            mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-4): ").strip()
            if mode in ['1', '2', '3', '4']:
                break
            print("–í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4")
        
        if mode == '1':
            # –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤
            print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤...")
            stats = autocad_controller.update_all_room_blocks(room_data)
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: {stats['updated']}")
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {stats['not_found']}")
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–æ–∫: {stats['errors']}")
            
        elif mode == '2':
            # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
            create_new_blocks(autocad_controller, room_data, available_blocks)
            
        elif mode == '3':
            # –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–ª–æ–∫–æ–≤
            import_data_from_blocks(autocad_controller, room_data, existing_room_blocks, excel_path)
            
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    else:
        print("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
        create_new_blocks(autocad_controller, room_data, available_blocks)


def create_new_blocks(autocad_controller, room_data, available_blocks):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –±–ª–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    default_block = autocad_controller.config.get("default_template_block", "HVAC_ROOM_DATA")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    if autocad_controller.block_exists(default_block):
        template_block = default_block
        print(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –±–ª–æ–∫-—à–∞–±–ª–æ–Ω: {template_block}")
    else:
        print(f"‚ö†Ô∏è  –ë–∞–∑–æ–≤—ã–π –±–ª–æ–∫ '{default_block}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not available_blocks:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞")
            return
        
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
        for i, block_name in enumerate(available_blocks[:15], 1):
            print(f"  {i}. {block_name}")
        
        # –í—ã–±–æ—Ä –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞-—à–∞–±–ª–æ–Ω–∞
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫-—à–∞–±–ª–æ–Ω (1-{min(15, len(available_blocks))}): ").strip()
                
                if not choice:
                    print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return
                
                block_index = int(choice) - 1
                if 0 <= block_index < min(15, len(available_blocks)):
                    template_block = available_blocks[block_index]
                    break
                else:
                    print(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {min(15, len(available_blocks))}")
                    
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞")
        
        print(f"üì¶ –í—ã–±—Ä–∞–Ω –±–ª–æ–∫-—à–∞–±–ª–æ–Ω: {template_block}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    print("\n‚öôÔ∏è  –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤? (–Ω–µ—Ç)")
    custom_placement = input("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ").strip().lower()
    
    if custom_placement in ['–¥–∞', 'yes', 'y', '–¥']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        print("\nüìç –°–ø–æ—Å–æ–±—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤:")
        print("  1. –ü–æ —Å–µ—Ç–∫–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
        print("  2. –í –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö")
        print("  3. –û—Ç–º–µ–Ω–∞")
        
        while True:
            placement_mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (1-3): ").strip()
            if placement_mode in ['1', '2', '3']:
                break
            print("–í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
        
        if placement_mode == '3':
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
            
        if placement_mode == '1':
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∫–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            print("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ —Å–µ—Ç–∫–µ:")
            
            try:
                start_x = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0): ") or "0")
                start_y = float(input("–ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0): ") or "0")
                spacing_x = float(input("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –ø–æ X (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ") or "100")
                spacing_y = float(input("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –ø–æ Y (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ") or "50")
                
                stats = autocad_controller.create_blocks_from_template(
                    room_data, template_block, 
                    start_point=(start_x, start_y),
                    spacing=(spacing_x, spacing_y)
                )
                
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                stats = autocad_controller.create_blocks_from_template(room_data, template_block)
        else:
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ
            handle_coordinate_placement(autocad_controller, room_data, template_block)
            return
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ —Å–µ—Ç–∫–µ
        print("\nüèóÔ∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        stats = autocad_controller.create_blocks_from_template(room_data, template_block)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤:")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–ª–æ–∫–æ–≤: {stats['created']}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
    
    if stats['created'] > 0:
        print("\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω –±–ª–æ–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")


def handle_coordinate_placement(autocad_controller, room_data, template_block):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    reader = ExcelDataReader("config/block_mapping.json")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö Excel
    if reader.has_coordinates_data(room_data):
        print("\nüìç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Excel —Ñ–∞–π–ª–µ")
        use_excel_coords = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ Excel? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        if use_excel_coords in ['–¥–∞', 'yes', 'y', '–¥']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ Excel
            coordinates = reader.extract_coordinates(room_data)
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            valid_data = []
            valid_coords = []
            
            for room, coord in zip(room_data, coordinates):
                if coord is not None:
                    valid_data.append(room)
                    valid_coords.append(coord)
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–µ {room.get('room_number')} - –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            
            if valid_coords:
                stats = autocad_controller.create_blocks_from_coordinates(
                    valid_data, template_block, valid_coords
                )
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–µ—â–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
                return
        else:
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            coordinates = get_manual_coordinates(room_data)
            if coordinates:
                stats = autocad_controller.create_blocks_from_coordinates(
                    room_data, template_block, coordinates
                )
            else:
                return
    else:
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coordinates = get_manual_coordinates(room_data)
        if coordinates:
            stats = autocad_controller.create_blocks_from_coordinates(
                room_data, template_block, coordinates
            )
        else:
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤:")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–ª–æ–∫–æ–≤: {stats['created']}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
    
    if stats['created'] > 0:
        print("\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω –±–ª–æ–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")


def import_data_from_blocks(autocad_controller, room_data, existing_blocks, excel_path):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤ AutoCAD –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel"""
    
    print("\nüì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–ª–æ–∫–æ–≤ AutoCAD –≤ Excel...")
    
    # –ß–∏—Ç–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –±–ª–æ–∫–æ–≤
    block_data = autocad_controller.read_block_attributes(existing_blocks)
    
    if not block_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ExcelDataReader –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    reader = ExcelDataReader("config/block_mapping.json")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    if excel_path == "multiple_sources":
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∂–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        print("–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        output_file = "data/–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ_–æ–±–Ω–æ–≤–ª–µ–Ω.xlsx"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏–∑ –±–ª–æ–∫–æ–≤
        success = save_merged_data_with_block_updates(reader, room_data, block_data, output_file)
        
        if success:
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_file}")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        print(f"\nüíæ –¢–µ–∫—É—â–∏–π Excel —Ñ–∞–π–ª: {excel_path}")
        save_choice = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        output_file = None
        if save_choice not in ['–¥–∞', 'yes', 'y', '–¥']:
            base_name = os.path.splitext(excel_path)[0]
            output_file = f"{base_name}_–æ–±–Ω–æ–≤–ª–µ–Ω.xlsx"
            print(f"üìÑ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {output_file}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Excel –¥–∞–Ω–Ω—ã–µ
        success = reader.update_excel_with_block_data(
            excel_path, room_data, block_data, output_file
        )
        
        if success:
            print("\nüéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")


def save_merged_data_with_block_updates(reader, room_data, block_data, output_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏–∑ –±–ª–æ–∫–æ–≤ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª"""
    try:
        import pandas as pd
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏  
        reverse_fields = reader.config.get("reverse_import_fields", ["supply_system", "extract_system"])
        
        print(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—è–º–∏: {', '.join(reverse_fields)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–º–µ—â–µ–Ω–∏—è
        block_dict = {}
        for block in block_data:
            room_num = block.get('room_number', '').strip()
            if room_num:
                block_dict[room_num] = block
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏–π
        updated_count = 0
        for room in room_data:
            room_num = str(room.get('room_number', '')).strip()
            
            if room_num in block_dict:
                block_info = block_dict[room_num]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                for field in reverse_fields:
                    if field in block_info and block_info[field]:
                        old_value = room.get(field, '')
                        new_value = block_info[field]
                        
                        if old_value != new_value:
                            room[field] = new_value
                            print(f"  üìù –ü–æ–º–µ—â–µ–Ω–∏–µ {room_num}: {field} '{old_value}' ‚Üí '{new_value}'")
                
                updated_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Excel –∫–æ–ª–æ–Ω–æ–∫
        excel_columns = reader.config.get("excel_columns", {})
        
        excel_data = []
        for room in room_data:
            excel_row = {}
            for field, excel_col in excel_columns.items():
                excel_row[excel_col] = room.get(field, '')
            excel_data.append(excel_row)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        df = pd.DataFrame(excel_data)
        df.to_excel(output_file, index=False, engine='openpyxl', sheet_name="–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –û–í–ò–ö")
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–º–µ—â–µ–Ω–∏–π")
        print(f"üíæ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {len(excel_data)} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return False


def get_manual_coordinates(room_data):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é"""
    print("\nüìç –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤:")
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: x,y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100,200)")
    print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    
    coordinates = []
    for i, room in enumerate(room_data):
        coord_input = input(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è {room.get('room_number', i+1)}: ").strip()
        
        if not coord_input:
            break
            
        try:
            x, y = map(float, coord_input.split(','))
            coordinates.append((x, y))
        except ValueError:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            
    if not coordinates:
        print("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤–≤–µ–¥–µ–Ω—ã")
        return None
        
    return coordinates


def create_sample_excel(file_path: str):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä Excel —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –û–í–ò–ö"""
    try:
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        sample_data = [
            {
                "–ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è": "101",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–û—Ñ–∏—Å –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞",
                "–ü–ª–æ—â–∞–¥—å, –º¬≤": 25.5,
                "–ü—Ä–∏—Ç–æ–∫, –º¬≥/—á": 150,
                "–í—ã—Ç—è–∂–∫–∞, –º¬≥/—á": 130,
                "–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç": 1200,
                "–ü—Ä–∏—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–ü1-1",
                "–í—ã—Ç—è–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–í1-1", 
                "–ö–ª–∞—Å—Å —á–∏—Å—Ç–æ—Ç—ã": "–ê",
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C": 22
            },
            {
                "–ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è": "102", 
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª",
                "–ü–ª–æ—â–∞–¥—å, –º¬≤": 45.0,
                "–ü—Ä–∏—Ç–æ–∫, –º¬≥/—á": 450,
                "–í—ã—Ç—è–∂–∫–∞, –º¬≥/—á": 400,
                "–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç": 2800,
                "–ü—Ä–∏—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–ü1-2",
                "–í—ã—Ç—è–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–í1-2",
                "–ö–ª–∞—Å—Å —á–∏—Å—Ç–æ—Ç—ã": "B", 
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C": 20
            },
            {
                "–ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è": "103",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ö–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–∞",
                "–ü–ª–æ—â–∞–¥—å, –º¬≤": 18.2,
                "–ü—Ä–∏—Ç–æ–∫, –º¬≥/—á": 110,
                "–í—ã—Ç—è–∂–∫–∞, –º¬≥/—á": 90,
                "–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç": 950,
                "–ü—Ä–∏—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–ü1-1",
                "–í—ã—Ç—è–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–í1-1",
                "–ö–ª–∞—Å—Å —á–∏—Å—Ç–æ—Ç—ã": "–ê",
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C": 23
            },
            {
                "–ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è": "104",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ê—Ä—Ö–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                "–ü–ª–æ—â–∞–¥—å, –º¬≤": 12.0,
                "–ü—Ä–∏—Ç–æ–∫, –º¬≥/—á": 60,
                "–í—ã—Ç—è–∂–∫–∞, –º¬≥/—á": 70,
                "–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç": 600,
                "–ü—Ä–∏—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–ü2-1",
                "–í—ã—Ç—è–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–í2-1",
                "–ö–ª–∞—Å—Å —á–∏—Å—Ç–æ—Ç—ã": "C",
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C": 18
            },
            {
                "–ù–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è": "105",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–°–µ—Ä–≤–µ—Ä–Ω–∞—è",
                "–ü–ª–æ—â–∞–¥—å, –º¬≤": 8.5,
                "–ü—Ä–∏—Ç–æ–∫, –º¬≥/—á": 200,
                "–í—ã—Ç—è–∂–∫–∞, –º¬≥/—á": 250,
                "–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç": 3500,
                "–ü—Ä–∏—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–ü3-1",
                "–í—ã—Ç—è–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "–í3-1",
                "–ö–ª–∞—Å—Å —á–∏—Å—Ç–æ—Ç—ã": "D",
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C": 25
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df = pd.DataFrame(sample_data)
        df.to_excel(file_path, index=False, sheet_name="–†–∞—Å—á–µ—Ç –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞: {file_path}")
        
    except (PermissionError, OSError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except SystemExit:
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        pass
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
